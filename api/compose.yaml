name: store

services:
  db:
    image: postgres:latest
    container_name: store_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-store}
      POSTGRES_USER: ${POSTGRES_USER:-store}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}
    volumes:
      - ${VOLUME:-./volumes}/postgres/store:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-store}"]
      interval: 5s
      timeout: 2s
      retries: 5

  account:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    container_name: store_account
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/${POSTGRES_DB:-store}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-store}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-store}
    depends_on:
      db:
        condition: service_healthy
    restart: always

  product:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: store_product
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/${POSTGRES_DB:-store}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-store}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-store}
    depends_on:
      db:
        condition: service_healthy
    restart: always

  order:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: store_order
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/${POSTGRES_DB:-store}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-store}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-store}
    depends_on:
      db:
        condition: service_healthy
    restart: always

  auth:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: store_auth
    environment:
      SPRING_DATASOURCE_URL:      jdbc:postgresql://db:5432/${POSTGRES_DB:-store}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-store}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-store}
      JWT_SECRET_KEY:            ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}
    depends_on:
      db:
        condition: service_healthy
    restart: always

  exchange:
    build:
      context: ./exchange-service
      dockerfile: Dockerfile
    container_name: store_exchange
    depends_on:
      db:
        condition: service_healthy
    restart: always

  gateway:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: store_gateway
    environment:
      LOGGING_LEVEL_STORE: ${LOGGING_LEVEL_STORE:-debug}
    ports:
      - "8080:8080"
    depends_on:
      account:
        condition: service_started
      product:
        condition: service_started
      order:
        condition: service_started
      auth:
        condition: service_started
      exchange:
        condition: service_started
    restart: always

  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    ports:
      - 9090:9090
    volumes:
      - $VOLUME/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-enterprise
    hostname: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - $VOLUME/grafana:/var/lib/grafana
      - $VOLUME/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources      
    restart: always
    depends_on:
      - prometheus
